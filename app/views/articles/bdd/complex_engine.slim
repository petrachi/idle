p Ami lecteur, cet article servira pour te faire savoir que j'expose au public un programme de mon invention, par le moyen duquel seul tu pourras, sans peine quelconque, dessiner en prenant compte de la perspective, et te soulager du travail qui t'a souvent fatigué l'esprit, lorsque tu as opéré manuellement #{":"} je puis, sans présomption, espérer qu'il ne te déplaira pas.

p Aprés cette introduction pompeuse, librement inspiré des premières lignes de l'<i>Avis nécessaire à ceux qui auront curiosité de voir la Machine d'Arithmétique et de s'en servir</i> par Blaise Pascal, il est temps de faire une présentation plus sobre du projet

p Il s'agira d'une librairie écrite en Ruby afin de dessiner et de transformer des formes en trois dimensions pour SVG, intitulée #{ coderay 'ComplexEngine', inline: true}.

h3 D'autres Technologies

p Il existe plusieurs manières, en matière de développement web, de dessiner en trois dimensions. On peut par exemple citer #{ coderay 'canvas', inline: true}, qui permet d'interagir avec la librairie WebGL. Je ne rentrerais cependant pas dans les détails de #{ coderay 'canvas', inline: true}, étant moi-même peu famillier avec cette technologie.

p Une autre façon de faire consiste à se servir de la propriété #{ coderay 'transform', inline: true}, introduite avec la version 3 de la spécification CSS, qui permet d'appliquer des transformations 3D à des éléments HTML. Cette technique sera néanmoins limitée, en terme de dessin, par les formes que peuvent prendre les éléments HTML eux-même, de base, rectangulaires.

p Ceci dit, je ne veux pas nier ici l'utilité de la propriété #{ coderay 'transform', inline: true}, surtout lorsqu'elle est alliée à d'autres comme #{ coderay 'transition', inline: true} ou #{ coderay 'animation', inline: true}. J'en veux pour exemple la démonstration suivante, où le dessin se mettra en mouvement au passage du curseur de la souris #{":"}

div class='container cube'
  div id='cube'
    div id='top'
      span 2
    div id='front'
      span 1
    div id='bottom'
      span 5
    div id='left'
      span 3
    div id='right'
      span 4
    div id='back'
      span 6

p C'est une autre solution encore que j'ai choisie pour la #{ coderay 'ComplexEngine', inline: true} #{":"} utiliser SVG (Scalable Vector Graphics) pour dessiner en deux dimensions, et faire appel à notre habileté afin de faire à croire à une forme en trois dimensions, tout comme en peinture, où l'agencement des traits nous fait imaginer une profondeur dans le dessin.

p Et quand je parle d'habilité, j'entends surtout notre habileté à programmer ! Puisque ce sera le rôle de la #{ coderay 'ComplexEngine', inline: true} que de calculer, pour les objets en trois dimensions que nous lui donnerons, la perspective et la profondeur.

h3 Complex

p En mathématiques, les nombres peuvent servir à représenter des points sur des espaces en plusieurs dimensions. Les nombres réels par exemples peuvent servir à représenter des points sur une surface à une dimensions. Imaginez une droite, c'est notre espace à une dimensions, le nombre #{ coderay '5', inline: true} peut vouloir dire "se déplacer de cinq unités vers la droite". De la même manière, le nombre #{ coderay '-3', inline: true} peut vouloir dire "se déplacer de trois unités vers la gauche".

svg class='quaternions' viewBox='-500 -50 1000 100'
  defs
    marker id='markerArrow' markerWidth='8' markerHeight='8' refX='4' refY='4' orient='auto'
      path d='M 0 0 L 6 4 L 0 8 Z' fill='#111'

  / axis
  line x1='-500' y1='0' x2='500' y2='0' class='light'

  / 5
  line x1='2' y1='10' x2='80' y2='10' marker-end='url(#markerArrow)'
  line x1='84' y1='10' x2='160' y2='10' marker-end='url(#markerArrow)'
  line x1='164' y1='10' x2='240' y2='10' marker-end='url(#markerArrow)'
  line x1='244' y1='10' x2='320' y2='10' marker-end='url(#markerArrow)'
  line x1='324' y1='10' x2='400' y2='10' marker-end='url(#markerArrow)'

  / 3
  line x1='-2' y1='10' x2='-80' y2='10' marker-end='url(#markerArrow)'
  line x1='-84' y1='10' x2='-160' y2='10' marker-end='url(#markerArrow)'
  line x1='-164' y1='10' x2='-240' y2='10' marker-end='url(#markerArrow)'

  / points
  circle cx='0' cy='0' r='4'
  circle cx='400' cy='0' r='4'
  circle cx='-240' cy='0' r='4'

  text x='-5' y='-10' 0
  text x='395' y='-10' 5
  text x='-250' y='-10' -3


p La même technique peut être utilisée pour un espace en deux dimensions, à l'aide des nombres complexes. Le nombre #{ coderay '3 + 4i', inline: true} représente trois unités vers la droite, et quatre vers le haut. #{ coderay '1 + 2i', inline: true} représente lui un mouvement à droite et deux vers le haut.

p L'avantage de ce systéme, c'est que l'addition arithmétique de deux nombres complexes correspond parfaitement à une translation en géométrie. #{ coderay '(3 + 4i) + (1 + 2i)', inline: true} #{"="} #{ coderay '4 + 6i', inline: true}

svg class='quaternions' viewBox='-500 -500 1000 550'

  / axis
  line x1='-500' y1='0' x2='500' y2='0' class='light'
  line x1='0' y1='-500' x2='0' y2='500' class='light'

  / 3 + 4i
  line x1='0' y1='0' x2='240' y2='-320'
  line x1='2' y1='6' x2='238' y2='6' marker-end='url(#markerArrow)' class='light'
  line x1='240' y1='-4' x2='240' y2='-314' marker-end='url(#markerArrow)' class='light'
  text x='120' y='25' class='light' 3
  text x='245' y='-140' class='light' 4

  / 1 + 2i
  line x1='240' y1='-320' x2='320' y2='-480'
  line x1='242' y1='-320' x2='318' y2='-320' marker-end='url(#markerArrow)' class='light'
  line x1='320' y1='-322' x2='320' y2='-474' marker-end='url(#markerArrow)' class='light'
  text x='280' y='-300' class='light' 1
  text x='330' y='-390' class='light' 2

  / points
  circle cx='0' cy='0' r='4'
  circle cx='240' cy='-320' r='4'
  circle cx='320' cy='-480' r='4'

  text x='-15' y='-10' 0
  text x='70' y='-160' 3 + 4i
  text x='230' y='-400' 1 + 2i
  text x='300' y='-487' 4 + 6i

p Mais l'analogie ne s'arrête pas là, il se trouve également que multiplier deux nombres complexes revient à effectuer une rotation du premier nombre, en fonction de l'angle décrit par le second.

p Si je voulais appliquer une rotation d'un huitième de tour, soit #{ coderay '45deg', inline: true} ou #{ coderay '(π/4)rad', inline: true}, au point désigné par le nombre #{ coderay '3 + 4i', inline: true}, il me suffit de le multiplier par #{ coderay '1/√2 + (1/√2)i', inline: true}. En faisant le calcul arithmétique, sachant que #{ coderay 'i * i = -1', inline: true}, on obtiens alors #{ coderay '3/√2 + (4/√2)i + (3/√2)i - 4/√2', inline: true} puis #{ coderay '-1/√2 + (7/√2)i', inline: true}.

p De la même façon, #{ coderay '1/√2 + (1/√2)i', inline: true} multiplié par lui même donne #{ coderay 'i', inline: true}. Le dessin ci-dessous, qui se met en mouvement au passage du curseur de la souris, illustre cette rotation #{":"}

svg class='quaternions' viewBox='-500 -500 1000 550'

  /axis
  line x1='-500' y1='0' x2='500' y2='0' class='light'
  line x1='0' y1='-500' x2='0' y2='500' class='light'

  line x1='0' y1='0' x2='240' y2='-320' class='rotate45'

  / -1/√2 + (7/√2)i
  line x1='0' y1='0' x2='-56' y2='-396'

  / 1/√2 + (1/√2)i
  line x1='0' y1='0' x2='56' y2='-56' class='light rotate45'
  path d='M 80 0 Q 75 -35 56 -56' class='rad'

  / points
  circle cx='0' cy='0' r='4'
  circle cx='240' cy='-320' r='4' class='rotate45'
  circle cx='-56' cy='-396' r='4'
  circle cx='56' cy='-56' r='4' class='light rotate45'
  circle cx='0' cy='-80' r='4' class='light'

  text x='-15' y='-10' 0
  text x='250' y='-315' class='rotate45' 3 + 4i
  text x='-180' y='-390' -1/√2 + (7/√2)i
  text x='65' y='-50' class='light rotate45' 1/√2 + (1/√2)i
  text x='-6' y='-88' class='light' i
  text x='40' y='-15' class='rad' 45°

p Il existe également une classe de nombres dont les opérations arithmétiques servent de parfaite analogie avec les transformations géométriques qu'on peut appliquer aux points qu'ils décrivent, ce sont les quaternions.

h3 Quaternions

p Les quaternions sont des nombres à quatres dimensions (ce qui est nécéssaire pour effectuer une rotation en trois dimensions). Ils s'écrivent sous la forme #{ coderay 'a + bi + cj + dk', inline: true}, où #{ coderay '(a, b, c, d)', inline: true} sont des nombres réels, et #{ coderay 'i² = j² = k² = ijk = -1', inline: true}.

p Avant de commencer notre travail sur la #{ coderay 'ComplexEngine', inline: true}, il faut d'abord créer une classe #{ coderay 'Quaternion', inline: true}, puisque Ruby ne gére pas ce type de nombres dans son support de base.

= coderay do
  | require 'mathn'

    def Quaternion *args
      if args[0].is_a? Quaternion
        args[0]
      elsif args[0].is_a? Numeric and args[1].is_a? Vector
        Quaternion.new args[0], *args[1]
      else
        Quaternion.new *args
      end
    end

    class Quaternion
      attr_accessor :a, :b, :c, :d

      def initialize a=0, b=0, c=0, d=0
        @a = a
        @b = b
        @c = c
        @d = d
      end

      def real
        @a
      end

      def imag
        @imag ||= Vector[@b,@c,@d]
      end
      alias :imaginary :imag

      def length
        @length ||= Math::sqrt( @a**2 + @b**2 + @c**2 + @d**2 )
      end

      def conj
        @conj ||= Quaternion.new( @a, -@b, -@c, -@d )
      end
      alias :conjugate :conj

      def inverse
        @inverse ||= conj / length**2
      end

      def unify
        @unify ||= self / length
      end

      def + other
        Quaternion.new( @a+other.a, @b+other.b, @c+other.c, @d+other.d )
      end

      def - other
        Quaternion.new( @a-other.a, @b-other.b, @c-other.c, @d-other.d )
      end

      def * other
        if other.is_a? Quaternion
          Quaternion.new(
            @a*other.a - @b*other.b - @c*other.c - @d*other.d,
            @a*other.b + @b*other.a + @c*other.d - @d*other.c,
            @a*other.c - @b*other.d + @c*other.a + @d*other.b,
            @a*other.d + @b*other.c - @c*other.b + @d*other.a
          )
        else
          Quaternion.new( @a*other, @b*other, @c*other, @d*other )
        end
      end

      def / other
        if other.is_a? Quaternion
          self * other.inverse
        else
          self * (1/other)
        end
      end

      def == other
        if other.is_a? Quaternion
          @a == other.a and @b == other.b and @c == other.c and @d == other.d
        else
          false
        end
      end

      def round ndigits=0
        Quaternion.new(
          @a.round(ndigits),
          @b.round(ndigits),
          @c.round(ndigits),
          @d.round(ndigits)
        )
      end

      def to_s
        "#{@a} + #{@b}i + #{@c}j + #{@d}k"
      end
    end

p Je tines à signaler que la classe #{ coderay 'Quaternion', inline: true} ci-dessus à été librement inspirée par une que j'ai pu trouver sur l'internet, #{link_to 'ici', 'https://github.com/padde/ruby-quaternion/blob/master/lib/quaternion.rb', target: :_blank}.

p Maintenant que c'est fait, nous allons pouvoir commencer le travail sur la #{ coderay 'ComplexEngine', inline: true}.

h3 Polyédres

p Selon Wikipedia, un polyédre est <i>une forme géométrique à trois dimensions ayant des faces planes polygonales qui se rencontrent selon des segments de droite qu'on appelle arêtes</i>. Ce sera la base de la #{ coderay 'ComplexEngine', inline: true}.

p Mais commençons d'abord par les points. Ils seront représentés par la partie imaginaire des quaternions, le travail sur la classe #{ coderay 'Point', inline: true} est alors assez simple, puisque la majorité à déjà été fait dans la classe #{ coderay 'Quaternion', inline: true}.

= coderay do
  | class ComplexEngine::Point
      attr_accessor :q

      def initialize *coords
        @q = Quaternion 0, *coords
      end

      def q= other
        @q = other.round(4)
      end

      def x
        q.imag[0]
      end

      def y
        q.imag[1]
      end

      def z
        q.imag[2]
      end
    end

p Découlent ensuite les classes #{ coderay 'Polygon', inline: true} ...

= coderay do
  | class ComplexEngine::Polygon
      attr_accessor :points

      def initialize *points
        @points = points
      end
    end

p ... et #{ coderay 'Polyhedron', inline: true}.

= coderay do
  | class ComplexEngine::Polyhedron
      attr_accessor :points, :faces, :polygons

      def initialize points:, faces:
        @points = points
        @faces = faces
        @polygons = faces.map do |face|
          ComplexEngine::Polygon.new *face.map{ |index| points[index] }
        end
      end
    end

p Il faut remarquer la présence de l'attribut #{ coderay '@points', inline: true} pour la classe #{ coderay 'Polyhedron', inline: true}, qui est là par souci d'optimisation puisque les polygones partagent des points en communs, le long des arrêtes du polyédre. En ajoutant cet attribut, nous pourrons partager un même point pour plusieurs polygones.

h3 Draw

p Il est temps maintenant d'ajouter une méthode #{ coderay 'to_svg', inline: true}, qui dessinera le polyédre. Nous ne occuperons pas, pour l'instant, de la perspective, et nous contenterons d'ignorer la coordonnée de la prodondeur.

p Afin de pouvoir utiliser la méthode #{ coderay 'content_tag', inline: true}, nous passerons en paramétre l'objet de vue. Cela nous permettra d'accéder aux méthodes de helpers de Rails.

= coderay do
  | class ComplexEngine::Polyhedron
      def to_svg view
        polygons.map{ |polygon| polygon.to_svg view }.reduce(&:concat)
      end
    end

    class ComplexEngine::Polygon
      def to_svg view
        view.content_tag :path, nil, d: path
      end

      def path
        "M " << points.map{ |pt| "\#{pt.x} \#{-pt.y}" }.join(" L ") << " Z"
      end
    end

p Voyons le résultat. Commençons par une forme simple, un ou deux triangles devront faire l'affaire. Nous nous attaquerons à des formes plus complexes une fois que la #{ coderay 'ComplexEngine', inline: true} sera plus avancée.

p Ho, et tu notera, cher lecteur, que le signe de la coordonnée #{ coderay 'y', inline: true} est inversé. C'est tout simplement pour compenser l'inversion que fait SVG lui même, comparé aux conventions habituelles.

p Si tout fonctionne bien, nous devrions voir apparaitre une image connue.

= coderay do
  | ?> Polyhedron.new(points: [
      Point.new(0, 0, 0),
      Point.new(0, 4, 0),
      Point.new(-2, 4, 0),
      Point.new(-1, 3, 0),
      Point.new(-3, 3, 0),
      Point.new(-3, 1, 0),
      Point.new(-4, 2, 0),
      Point.new(-4, 0, 0),
    ], faces: [
      [0, 1, 3],
      [1, 2, 3],
      [2, 3, 4],
      [3, 4, 5],
      [4, 5, 6],
      [5, 6, 7],
      [7, 5, 0],
      [0, 3, 5],
    ]).to_svg self

    => '<path d="M 0 0 L 0 -4 L -1 -3 Z"></path><path d="M 0 -4 L -2 -4 L -1 -3 Z"></path><path d="M -2 -4 L -1 -3 L -3 -3 Z"></path><path d="M -1 -3 L -3 -3 L -3 -1 Z"></path><path d="M -3 -3 L -3 -1 L -4 -2 Z"></path><path d="M -3 -1 L -4 -2 L -4 0 Z"></path><path d="M -4 0 L -3 -1 L 0 0 Z"></path><path d="M 0 0 L -1 -3 L -3 -1 Z"></path>'

p Et voilà le résultat (avec un peu de CSS) !

svg id='ruby-2d' class='demo' viewbox='-4 -4 4 4'
  = ComplexEngine.ruby_2d.to_svg self

h3 Translate

p Maintenant que la base est là, il est temps de s'occuper des trasformations applicables aux polyédres, c'est à dire, la translation et la rotation.

p Commençons par la translation, via la méthode #{ coderay 'translate', inline: true}. Pour cela, nous utiliserons simplement la méthode #{ coderay '+', inline: true} des #{ coderay 'Quaternion', inline: true}. Un #{ coderay 'Quaternion', inline: true} sera également passé en paramétre, comme référence de la translation à éffectuer.

= coderay do
  | class ComplexEngine::Polyhedron
      def translate q
        points.each{ |pt| pt.translate! q }
        self
      end
    end

    class ComplexEngine::Point
      def translate! other
        self.q = q + other
      end
    end

p Un test, comme toujours, s'impose. Cette fois-ci, nous utiliserons un simple carré que nous ferons se déplacer en haut à droite.

= coderay do
  | ?> square = Polyhedron.new(points: [
      Point.new(0, 3, 0),
      Point.new(3, 3, 0),
      Point.new(3, 0, 0),
      Point.new(0, 0, 0),
    ], faces: [
      [0, 1, 2, 3]
    ])

    ?> square.to_svg self
    => '<path d="M 0 -3 L 3 -3 L 3 0 L 0 0 Z"></path>'

    ?> square.translate!(Quaternion(0,1,1,0)).to_svg self
    => '<path d="M 1 -4 L 4 -4 L 4 -1 L 1 -1 Z"></path>'

svg id='translate' class='demo' viewbox='0 -4 4 4'
  = ComplexEngine.square.to_svg self
  line x1='0' y1='0' x2='.9' y2='-.9' marker-end='url(#markerArrow)'
  line x1='3' y1='0' x2='3.9' y2='-.9' marker-end='url(#markerArrow)'
  line x1='3' y1='-3' x2='3.9' y2='-3.9' marker-end='url(#markerArrow)'
  line x1='0' y1='-3' x2='.9' y2='-3.9' marker-end='url(#markerArrow)'
  = ComplexEngine.square.translate!(Quaternion(0,1,1,0)).to_svg self

p Ça fonctionne parfaitement ! J'ai ajouté des fléches sur chaque point afin de bien voir la transformation qui s'opére.

h3 Rotate

p Pour la rotation, les choses vont êtres un poil plus compliquées. On va avoir besoin de deux paramétres, un axe (atour duquel on fait tourner le polyédre) et un angle (qu'on exprimera en radiant).

p À l'aide de ces deux éléments, nous pourrons construire un #{ coderay 'Quaternion', inline: true} particulier, que j'appelerais #{ coderay 'h', inline: true}. On pourra finalement calculer la rotation d'un point désigné par le quaternion #{ coderay 'q', inline: true} à l'aide de la formule suivante #{ coderay 'h * q * h.inverse', inline: true}.

= coderay do
  | class ComplexEngine::Polyhedron
      def rotate! q, phi
        h = Quaternion(
          Math.cos(phi/2.0),
          *q.unify.imag.map{ |c| c * Math::sin(phi/2.0) }
        )

        points.each{ |pt| pt.rotate! h }
        self
      end
    end

    class ComplexEngine::Point
      def rotate! h
        self.q = h * q * h.inverse
      end
    end

p Pour la démonstration, on va récupérer notre carré de tout à l'heure, et effectuer une rotation de 60° autour de la diagonale du carré. Je ferais aussi, à titre de comparaison, la même transformation via la propriété #{ coderay 'transform', inline: true} de CSS.

= coderay do
  | ?> TAU = Math::PI * 2

    ?> square.rotate!(Quaternion(0,1,1,0), TAU/6).to_svg self
    => '<path d="M 0.75 -2.25 L 3.0 -3.0 L 2.25 -0.75 L 0.0 -0.0 Z"></path>'

div id='demo-rotate' class='fluid'
  svg id='rotate' class='demo' viewbox='0 -3.5 4 4'
    line x1='-4' y1='4' x2='4' y2='-4' class='light'
    path d='M 1.15 -1.54 C .65 -.67 2.025 -0.79 1.775 -1.42' class='line' marker-end='url(#markerArrow)'
    text x='1.4' y='-1.1' φ
    = ComplexEngine.square.rotate!(Quaternion(0,1,1,0), TAU/6).to_svg self
    path d='M 2 -.66 L 2.25 -.75 L 2.33 -1' class='rad'
    line x1='-4' y1='-.75' x2='4' y2='-.75' class='dotted'

  svg id='rotate-css' class='demo' viewbox='0 -3.5 4 4'
    line x1='-4' y1='4' x2='4' y2='-4' class='light'
    path d='M 1.15 -1.54 C .65 -.67 2.025 -0.79 1.775 -1.42' class='line' marker-end='url(#markerArrow)'
    text x='1.4' y='-1.1'φ
    = ComplexEngine.square.to_svg self
    path d='M 2.75 0 L 3 0 L 3 -.25' class='rad'
    line x1='-4' y1='-.75' x2='4' y2='-.75' class='dotted'

p Et voilà !

p Je dois tout de même signaler qu'il existe une autre méthode pour calculer la rotation, en calculant la matrice orthogonale d'un quaternion. Ce sera une technique plus adapté pour ceux qui choississent ne ne pas implémenter les #{ coderay 'Quaternion', inline: true}, et de préférer le système 'classique' de représentation d'un point, avec les trois coordonnées #{ coderay '(x, y, z)', inline: true}.

= coderay do
  | class ComplexEngine::Polyhedron
      def rotate_alt! q, phi
        sin = Math.sin phi / 2
        cos = Math.cos phi / 2

        q0 = cos
        q1 = q.unify.imag[0] * sin
        q2 = q.unify.imag[1] * sin
        q3 = q.unify.imag[2] * sin

        rotation_matrix = Matrix[
          [q0**2 + q1**2 - q2**2 - q3**2, 2*(q1*q2 - q0*q3), 2*(q1*q3 + q0*q2)],
          [2*(q2*q1 + q0*q3), q0**2 - q1**2 + q2**2 - q3**2, 2*(q2*q3 - q0*q1)],
          [2*(q3*q1 - q0*q2), 2*(q3*q2 + q0*q1), q0**2 - q1**2 - q2**2 + q3**2],
        ]

        points.each{ |pt| pt.rotate_alt! rotation_matrix }
        self
      end
    end

    class ComplexEngine::Point
      def rotate_alt! rotation_matrix
        result_matrix = rotation_matrix * Matrix[[x], [y], [z]]
        x = result_matrix.element(0, 0)
        y = result_matrix.element(1, 0)
        z = result_matrix.element(2, 0)

        self.q = Quaternion.new(0, x, y, z)
      end
    end

h3 Perspective

p Il est temps d'ajouter le calcul de la perspective. L'idée ici est relativement simple #{":"} On commence par définir un point de #{ coderay 'perspective', inline: true}, c'est la position de l'observateur par rapport au plan d'équation #{ coderay 'z = 0', inline: true} (tous les points qui vérifient cette équation constituent le plan), formé par les axes #{ coderay '(x, y)', inline: true}. Cela nous permettra ensuite de calculer, pour chaque point du polyédre, l'endroit où la droite formée entre le point de perspective et le plan se croisent.

p Dans l'illisutration ci-dessous, on étudie le point #{ coderay '2i + 2j + 4k', inline: true} avec un point de perspective à #{ coderay '-7.5k', inline: true}.

svg class='quaternions' viewBox='-500 -250 1000 500'

  / axis
  line x1='-500' y1='0' x2='500' y2='0' class='light'
  line x1='0' y1='-500' x2='0' y2='500' class='light'
  line x1='-400' y1='200' x2='400' y2='-200' class='light'

  / 2i + 2j + 4k (k)
  line x1='122' y1='-122' x2='160' y2='-140' marker-end='url(#markerArrow)' class='light'
  line x1='162' y1='-142' x2='200' y2='-160' marker-end='url(#markerArrow)' class='light'
  line x1='202' y1='-162' x2='240' y2='-180' marker-end='url(#markerArrow)' class='light'
  line x1='242' y1='-182' x2='275' y2='-197' marker-end='url(#markerArrow)' class='light'

  / perspective
  line x1='78.26' y1='-78.26' x2='280' y2='-200' class='rad'

  / plan
  path d="M -200 -150 L 200 -150 L 200 150 L -200 150 Z" class='plan'

  / 2i + 2j + 4k (i & j)
  line x1='0' y1='0' x2='60' y2='0' marker-end='url(#markerArrow)' class='light'
  line x1='64' y1='0' x2='118' y2='0' marker-end='url(#markerArrow)' class='light'
  line x1='120' y1='-2' x2='120' y2='-60' marker-end='url(#markerArrow)' class='light'
  line x1='120' y1='-64' x2='120' y2='-118' marker-end='url(#markerArrow)' class='light'

  / perspective
  line x1='-300' y1='150' x2='78.26' y2='-78.26' class='rad'

  / 1,304i + 1,304j
  line x1='72.26' y1='-78.26' x2='84.26' y2='-78.26' class='rad'
  line x1='78.26' y1='-72.26' x2='78.26' y2='-84.26' class='rad'


  / points
  circle cx='0' cy='0' r='4'
  circle cx='280' cy='-200' r='4'
  circle cx='-300' cy='150' r='4'
  circle cx='78.26' cy='-78.26' r='1' class='rad'

  text x='-15' y='-5' 0
  text x='290' y='-195' 2i + 2j + 4k
  text x='-305' y='170' p (-7.5k)
  text x='0' y='-78' class='rad' 1,3i + 1,3j
  text x='-190' y='-130' z #{"="} 0

p La méthode est la suivante #{":"} On commence par calculer le vecteur qui correspond à la droite formée par les deux points (celui de la perspective, et celui du point étudié). Le vecteur sert à définir la direction de la droite, il nous sert ensuite à définir la réprésentation paramétrique de la droite (un point de référence et une direction).

p Il faut faire attention à ce moment là que la droite ne soit pas parralléle au plan, auquel cas il n'y aura pas de point d'intersection. Si cette condition est validée, on peux commencer à résoudre notre système d'équation. La représentation paramétrique exprime les trois coordonnées #{ coderay '(x, y, z)', inline: true} selon une variable, généralement appellée #{ coderay 't', inline: true}.

p On peut se servir de l'équation du plan pour trouver la valeur de #{ coderay 't', inline: true}. En utilisant cette valeur dans la représentation paramétrique de la droite, on peut calculer les valeurs de #{ coderay '(x, y)', inline: true} du point d'intersection.

p Cette procédure se résume à un bref calcul, en pseudo-code #{":"} #{ coderay 'x = point.x + ((point.x - perspective.x) * (-point.z / (point.z - perspective.z)))', inline: true}, et c'est la même chose pour la coordonnée #{ coderay 'y', inline: true}.

= coderay do
  | class ComplexEngine::Polyhedron
      def to_svg view, perspective: Quaternion(0, 0, 0, -Float::INFINITY)
        polygons.map{ |polygon| polygon.to_svg(view, perspective) }.reduce(&:concat)
      end
    end

    class ComplexEngine::Polygon
      def to_svg view, perspective
        view.content_tag :path, nil, d: path(perspective)
      end

      def path perspective
        "M " << points.map do |pt|
          proj = pt.proj perspective
          "\#{proj.x} \#{-proj.y}"
        end.join(" L ") << " Z"
      end
    end

    class ComplexEngine::Point
      def proj q
        z >= q.imag[2] or raise RangeError, 'the "z" coordinates of self must be >= to the "z" coordinate of the perspective point'

        t = -z / (z - q.imag[2])
        nx = x + ((x - q.imag[0]) * t)
        ny = y + ((y - q.imag[1]) * t)

        self.class.new nx, ny, 0
      end
    end

p Je crois qu'encore une fois, une démonstration s'impose ! Remarquez au passage qu'ignorer la perspective revient à définir un point de perspective infiniment loin.

p Nous allons encore récupérer notre carré, que nous allons cette fois faire tourner autour de l'axe #{ coderay 'x', inline: true} d'un angle de #{ coderay '-45°', inline: true}, de sorte qu'il ait l'air de basculer vers nous.

= coderay do
  | ?> square.rotate!(Quaternion(0,1,0,0), -TAU/8).to_svg self
    => '<path d="M 0.0 -2.1213 L 3.0 -2.1213 L 3.0 -0.0 L 0.0 -0.0 Z"></path>'

    ?> square
        .rotate!(Quaternion(0,1,0,0), -TAU/8)
        .to_svg self, perspective: Quaternion(0, 1.5, 0, -16)
    => '<path d="M -0.2293 -2.4455 L 3.2293 -2.4455 L 3.0 -0.0 L 0.0 -0.0 Z"></path>'

div id='demo-perspective' class='fluid'
  svg class='demo' viewbox='-.5 -3.5 4 4'
    line x1='-.5' y1='0' x2='3.5' y2='0' class='dotted'
    line x1='-.5' y1='-3' x2='3.5' y2='-3' class='dotted'
    line x1='0' y1='.5' x2='0' y2='-3.5' class='dotted'
    line x1='3' y1='.5' x2='3' y2='-3.5' class='dotted'
    = ComplexEngine.square.rotate!(Quaternion(0,1,0,0), -TAU/8).to_svg self

  svg class='demo' viewbox='-.5 -3.5 4 4'
    line x1='-.5' y1='0' x2='3.5' y2='0' class='dotted'
    line x1='-.5' y1='-3' x2='3.5' y2='-3' class='dotted'
    line x1='0' y1='.5' x2='0' y2='-3.5' class='dotted'
    line x1='3' y1='.5' x2='3' y2='-3.5' class='dotted'
    = ComplexEngine.square.rotate!(Quaternion(0,1,0,0), -TAU/8).to_svg self, perspective: Quaternion(0, 1.5, 0, -16)

h3 Origin

p Peut-être auras-tu remarqué cher lecteur, mais notre roration n'est pas tout à fait au point, en effet, l'axe de la rotation est représenté par un #{ coderay 'Quaternion', inline: true}. Autrement dit, l'axe de la rotation passe nécéssairement par le point #{ coderay '(0, 0, 0)', inline: true}.

p Je m'en suis rendu compte avec l'exemple ci-dessus #{":"} on fait une rotation autour de l'axe #{ coderay 'x', inline: true}, qui donne l'impression que le carré tourne autour de l'arrête du bas, mais il serait actuellement impossible de le faire tourner autour de l'arrête du haut ! C'est un problème.

p Il n'y a pas de solution mathématique à ce problème, pas de formule qui peut nous aider ici (en tout cas, aucune que je connaisse). Il va falloir utiliser notre astuce pour contourner ce problème.

p La translation nous permet de déplacer un point par rapport au point d'origine #{ coderay '(0, 0, 0)', inline: true}, ou, vu autrement, on peut déplacer le point d'origine par rapport à un point. Si on faisait deux translations, une avant la rotation, et une ensuite, pour compenser, on pourrait effectivement 'déplacer' le point d'origine, le centre de la rotation.

= coderay do
  | class ComplexEngine::Polyhedron
      def rotate! q, phi, origin: Quaternion(0, 0, 0, 0)
        sin = Math::sin(phi/2.0)
        h = Quaternion(
          Math.cos(phi/2.0),
          *q.unify.imag.map{ |c| c * sin }
        )

        points.each{ |pt| pt.rotate! h, origin }
        self
      end
    end

    class ComplexEngine::Point
      def rotate! h, origin
        self.q = h * (q + origin.conjugate) * h.inverse + origin
      end
    end

= coderay do
  | ?> square
        .rotate!(Quaternion(0,1,0,0), -TAU/8)
        .to_svg self, perspective: Quaternion(0, 1.5, 0, -16)
    => '<path d="M -0.2293 -2.4455 L 3.2293 -2.4455 L 3.0 -0.0 L 0.0 -0.0 Z"></path>'

    ?> square
        .rotate!(Quaternion(0,1,0,0), -TAU/8, origin: Quaternion(0, 0, 3, 0))
        .to_svg self, perspective: Quaternion(0, 1.5, 0, -16)
    => '<path d="M 0.0 -3.0 L 3.0 -3.0 L 2.8244 -0.7758 L 0.1756 -0.7758 Z"></path>'

div id='demo-origin' class='fluid'
  svg class='demo' viewbox='-.5 -3.5 4 4'
    line x1='-.5' y1='0' x2='3.5' y2='0' class='dotted'
    line x1='-.5' y1='-3' x2='3.5' y2='-3' class='dotted'
    line x1='0' y1='.5' x2='0' y2='-3.5' class='dotted'
    line x1='3' y1='.5' x2='3' y2='-3.5' class='dotted'
    = ComplexEngine.square.rotate!(Quaternion(0,1,0,0), -TAU/8).to_svg self, perspective: Quaternion(0, 1.5, 0, -16)
    circle cx='0' cy='0' r='0.1' class='rad'
    path d='M 0 0 L 1 0 L .9 -.075 L .9 .075 L 1 0' class='rad'
    text x='-.3' y='.3' class='rad' 0

  svg class='demo' viewbox='-.5 -3.5 4 4'
    line x1='-.5' y1='0' x2='3.5' y2='0' class='dotted'
    line x1='-.5' y1='-3' x2='3.5' y2='-3' class='dotted'
    line x1='0' y1='.5' x2='0' y2='-3.5' class='dotted'
    line x1='3' y1='.5' x2='3' y2='-3.5' class='dotted'
    = ComplexEngine.square.rotate!(Quaternion(0,1,0,0), -TAU/8, origin: Quaternion(0, 0, 3, 0)).to_svg self, perspective: Quaternion(0, 1.5, 0, -16)
    circle cx='0' cy='-3' r='0.1' class='rad'
    path d='M 0 -3 L 1 -3 L .9 -3.075 L .9 -2.925 L 1 -3' class='rad'
    text x='-.3' y='-3.3' class='rad' 3j

p Et ça y est, nos deux tranformations fonctionnement à merveille. La prochaine étape sera d'ajouter du mouvement dans nos dessins. Un peu de dynamisme ! Que diable !

h3 Traduction

p Ami lecteur, j'ai peur. J'ai peur d'avoir sélectionné le mauvais language de programmation pour notre librairie, puisque si on veut pouvoir manipuler dynamiquement nos polyédres, le meilleur choix semble être Javascript. Je vais donc m'occupper dans la section suivante de traduire complétement notre librairie dans ce language. (note #{":"} le code suivant est écrit en CoffeeScript)


= coderay lang: :javascript do
  | class window.Quaternion
      constructor: (@a, @b, @c, @d) ->

      real: ->
        @a

      imag: ->
        [@b, @c, @d]

      length: ->
        Math.sqrt @a**2 + @b**2 + @c**2 + @d**2

      conj: ->
        new Quaternion(@a, -@b, -@c, -@d)

      inverse: ->
        @conj().div @length()**2

      unify: ->
        @div @length()

      add: (other) ->
        new Quaternion( @a+other.a, @b+other.b, @c+other.c, @d+other.d )

      sub: (other) ->
        new Quaternion( @a-other.a, @b-other.b, @c-other.c, @d-other.d )

      times: (other) ->
        if other instanceof Quaternion
          new Quaternion(
            @a*other.a - @b*other.b - @c*other.c - @d*other.d,
            @a*other.b + @b*other.a + @c*other.d - @d*other.c,
            @a*other.c - @b*other.d + @c*other.a + @d*other.b,
            @a*other.d + @b*other.c - @c*other.b + @d*other.a
          )
        else
          new Quaternion( @a*other, @b*other, @c*other, @d*other )

      div: (other) ->
        if other instanceof Quaternion
          this.times other.inverse()
        else
          this.times 1/other

    class window.Point
      constructor: (x, y, z) ->
        @q = new Quaternion(0, x, y, z)

      x: ->
        @q.imag()[0]

      y: ->
        @q.imag()[1]

      z: ->
        @q.imag()[2]

      translate: (other) ->
        @q = @q.add other

      rotate: (h, origin) ->
        @q = h.times(@q.add(origin.conj())).times(h.inverse()).add(origin)

      proj: (q) ->
        t = -@z() / (@z() - q.imag()[2])
        nx = @x() + ((@x() - q.imag()[0]) * t)
        ny = @y() + ((@y() - q.imag()[1]) * t)

        new Point(nx, ny, 0)

    class window.Polygon
      constructor: (@points) ->
        @path_elt = document.createElementNS("http://www.w3.org/2000/svg", "path")

      toSvg: (perspective) ->
        @path_elt.setAttribute 'd', @path(perspective)

      path: (perspective) ->
        projs = for pt in @points
          proj = pt.proj perspective
          "\#{proj.x()} \#{-proj.y()}"

        "M " + projs.join(" L ") + " Z"

    class window.Polyhedron
      constructor: (@points, @faces) ->
        @polygons = for face in @faces
          new Polygon(@points[index] for index in face)

      translate: (q) ->
        point.translate(q) for point in @points
        this

      rotate: (q, phi, origin = new Quaternion(0,0,0,0)) ->
        sin = Math.sin phi/2.0
        c = q.unify().imag()
        h = new Quaternion(Math.cos(phi/2.0), c[0] * sin, c[1] * sin, c[2] * sin)

        point.rotate(h, origin) for point in @points
        this

      toSvg: (svg_elt, perspective = new Quaternion(0, 0, 0, -Infinity)) ->
        for polygon in @polygons
          polygon.toSvg perspective
          svg_elt.appendChild polygon.path_elt

h3 Synergie

p On va aussi écrire une méthode #{ coderay 'to_js', inline: true} dans la partie Ruby de la #{ coderay 'ComplexEngine', inline: true}, juste au cas où on aurait besoin de conserver une synergie entre les parties de la librairie, si elles devaient dans le futur évoluer indépendeamment, et se spécialiser.

= coderay do
  | class ComplexEngine::Polyhedron
      def to_js
        params = {
          points: points.map(&:q).map(&:imag),
          faces: faces
        }.to_json
        "Polyhedron.initialize(#{params})".html_safe
      end
    end

= coderay lang: :javascript do
  | class window.Polyhedron
      this.initialize = (params) ->
        new Polyhedron(new Point(pt[0], pt[1], pt[2]) for pt in params['points'], params['faces'])

h3 Animation

p À partir de là, faire une animation n'est pas bien compliqué. On peut, en fonction de la durée de l'animation, calculer chaque étape intermédiaire, et redessiner le polyédre à chacune de ces étapes.

p Par exemple, pour un octahédre légérement incliné, qu'on ferait tourner indéfiniement autour de l'axe 'nord-sud' #{":"}

= coderay lang: :javascript do
  | TAU = Math.PI * 2.0

    var octahedron = #{ ComplexEngine.octahedron(r: 30).rotate!(Quaternion(0, -1, 0, -1), TAU/24).to_js }
    var svg_elt = document.querySelector('svg#octahedron')

    var q = octahedron.points[0].q
    var phi = TAU/480

    var rotateOctahedron = function(){
      octahedron.rotate(q, phi).toSvg(svg_elt)
      requestAnimationFrame(rotateOctahedron)
    }

    requestAnimationFrame(rotateOctahedron)

svg id='demo-octahedron' class='demo' viewBox='-35 -35 70 70'
  circle cx='0' cy='0' r='1' class='rad'
  path d='M 0 0 L 10.794 -56.978' class='rad'

javascript:
  (function() {
    TAU = Math.PI * 2.0

    var octahedron = #{ ComplexEngine.octahedron(r: 30).rotate!(Quaternion(0, -1, 0, -1), TAU/24).to_js }
    var svg_elt = document.querySelector('svg#demo-octahedron')

    var q = octahedron.points[0].q
    var phi = -TAU/480

    var rotateOctahedron = function(){
      octahedron.rotate(q, phi).toSvg(svg_elt)
      requestAnimationFrame(rotateOctahedron)
    }

    requestAnimationFrame(rotateOctahedron)
  }).call(this)

div id='start-demo-octahedrons'
  p Pour ceux qui veulent aller plus loin dans les animations, je vous recommande la lecture d'un de mes projets sur github #{":"} #{ link_to 'ModelEngine', 'https://github.com/petrachi/ModelEngine', target: :_blank }, qui m'a servi de base pour l'écriture de cet article.

  p Vous pouvez également télécharger tous les fichier de la #{ coderay 'ComplexEngine', inline: true} en cliquant sur le bouton ci-dessous.

  p class='align-center'
    = link_to "Télécharger les fichiers", "/dl/complex_engine.zip", class: :btn

  p Quand à moi, je vous laisse avec une dernière animation que personnellement je trouve hypnotisante ...

  svg id='demo-octahedrons' class='demo' viewBox='-1 -1 2 2'

  - octahedrons = 48.times.map{ |_| ComplexEngine.octahedron(origin: Quaternion(0, rand(48)/100.0-0.25, rand(48)/100.0-0.25, rand(48)/100.0-0.25), r: 0.5).rotate!(Quaternion(0, -1, 0, -1), TAU/24).to_js }.to_s

  javascript:
    (function() {
      TAU = Math.PI * 2.0

      var active = false
      var svg_elt = document.querySelector('svg#demo-octahedrons')
      var origin = new Quaternion(0,0,0,-1)
      var phi = TAU/90

      var octahedrons = #{ octahedrons.html_safe }.map(function(e){ return eval(e) })
      var qs = []
      var phis = []
      for(var i=0; i < 48; i++){
        qs.push(new Quaternion(0, (Math.random()/2) - 0.25, 1, (Math.random()/2) - 0.25))
        phis.push(TAU/(90 - Math.random()*4))
        octahedrons[i].toSvg(svg_elt)
      }

      var rotateOctahedrons = function(){
        for(var i=0; i < 48; i++){
          octahedrons[i].rotate(qs[i], phis[i], origin).toSvg(svg_elt)
        }
        requestAnimationFrame(rotateOctahedrons)
      }

      document.querySelector('#start-demo-octahedrons').addEventListener('mouseenter', function(){
        if(!active){
          active = true
          requestAnimationFrame(rotateOctahedrons)
        }
      })
    }).call(this)
